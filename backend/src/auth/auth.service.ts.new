import { Injectable, UnauthorizedException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../entities/user.entity';
import { JwtService } from '@nestjs/jwt';
import { LoginDto } from '../dto/auth/login.dto';
import * as bcrypt from 'bcrypt';
import { JwtPayload } from '../interfaces/jwt-payload.interface';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
    private jwtService: JwtService,
  ) {}

  async login(loginDto: LoginDto) {
    const { username, password } = loginDto;
    const user = await this.usersRepository.findOne({ where: { username } });
    
    // ユーザーが存在しない場合
    if (\!user) {
      throw new UnauthorizedException('ユーザー名またはパスワードが正しくありません');
    }
    
    // パスワードが一致しない場合
    const passwordMatches = await bcrypt.compare(password, user.password);
    if (\!passwordMatches) {
      throw new UnauthorizedException('ユーザー名またはパスワードが正しくありません');
    }
    
    // JWTペイロードの作成
    const payload: JwtPayload = {
      sub: user.id,
      username: user.username,
      role: user.role,
    };
    
    // レスポンスの形式を統一
    return {
      accessToken: this.jwtService.sign(payload),
      user: {
        id: user.id,
        username: user.username,
        fullName: user.fullName,
        role: user.role,
      },
    };
  }

  async getProfile(userId: string) {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    
    if (\!user) {
      throw new UnauthorizedException('ユーザーが見つかりません');
    }
    
    // パスワードを除外して返却
    const { password, ...result } = user;
    return result;
  }
}
